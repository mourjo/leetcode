package me.mourjo;

public class ValidSudoku {
    /** https://leetcode.com/problems/valid-sudoku/
     * Determine if a 9x9 Sudoku board is valid. Only the filled cells need
     * to be validated according to the following rules:
     *
     * Each row must contain the digits 1-9 without repetition.
     * Each column must contain the digits 1-9 without repetition.
     * Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.
     *
     * The Sudoku board could be partially filled, where empty cells are filled with the character '.'.
     *
     * Example 1:
     *
     * Input:
     * [
     *   ["5","3",".",".","7",".",".",".","."],
     *   ["6",".",".","1","9","5",".",".","."],
     *   [".","9","8",".",".",".",".","6","."],
     *   ["8",".",".",".","6",".",".",".","3"],
     *   ["4",".",".","8",".","3",".",".","1"],
     *   ["7",".",".",".","2",".",".",".","6"],
     *   [".","6",".",".",".",".","2","8","."],
     *   [".",".",".","4","1","9",".",".","5"],
     *   [".",".",".",".","8",".",".","7","9"]
     * ]
     * Output: true
     * Example 2:
     *
     * Input:
     * [
     *   ["8","3",".",".","7",".",".",".","."],
     *   ["6",".",".","1","9","5",".",".","."],
     *   [".","9","8",".",".",".",".","6","."],
     *   ["8",".",".",".","6",".",".",".","3"],
     *   ["4",".",".","8",".","3",".",".","1"],
     *   ["7",".",".",".","2",".",".",".","6"],
     *   [".","6",".",".",".",".","2","8","."],
     *   [".",".",".","4","1","9",".",".","5"],
     *   [".",".",".",".","8",".",".","7","9 ]
     * ]
     * Output: false
     * Explanation: Same as Example 1, except with the 5 in the top left corner being
     *     modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
     */

    public static boolean isValidSudoku(char[][] a) {
        int r[] = {0,0,0,0,0,0,0,0,0};
        int c[] = {0,0,0,0,0,0,0,0,0};
        int box [] = {0,0,0,0,0,0,0,0,0};

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                int x = a[i][j] - '0';
                if (x < 1 || x > 9) continue;

                int valm = 1 << x;

                if ((r[i] & valm) > 0) return false;
                if ((c[j] & valm) > 0) return false;
                if ((box[((i/3)*3)+(j/3)] & valm) > 0) return false;

                r[i] |= valm;
                c[j] |= valm;
                box[((i/3)*3)+(j/3)] |= valm;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] board =
                new char [][]
                        {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        Utilities.check(isValidSudoku(board), true);

        board[0][0] = '8';
        Utilities.check(isValidSudoku(board), false);


        board = new char [][]
                       {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '9', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        Utilities.check(isValidSudoku(board), false);


        board = new char [][]
                       {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '7', '.', '8', '.', '3', '.', '.', '1'},
                        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '.', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        Utilities.check(isValidSudoku(board), false);


        board = new char [][]
                       {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '7', '.', '8', '.', '3', '.', '.', '1'},
                        {'.', '.', '.', '.', '2', '.', '.', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '.', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        Utilities.check(isValidSudoku(board), true);


        board = new char [][]
                       {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '7', '.', '8', '.', '3', '.', '.', '1'},
                        {'.', '.', '.', '.', '2', '.', '6', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '.', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        Utilities.check(isValidSudoku(board), false);


    }
}
