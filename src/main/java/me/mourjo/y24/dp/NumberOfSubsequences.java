package me.mourjo.y24.dp;

import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public class NumberOfSubsequences {

    public static void main(String[] args) {
        Assertions.assertEquals(7, getSubsequenceCount("SUE", "SUBSEQUENCE"));
        Assertions.assertEquals(536, getSubsequenceCount("UVV", "VVVVUUUUVUVUVUVVVVUUVVUUUUVUVUVUVUUU"));
        Assertions.assertEquals(4, getSubsequenceCount("UVV", "VVVVUUUUVUV"));
        Assertions.assertEquals(3, getSubsequenceCount("SUC", "SUBSEQUENCE"));
        Assertions.assertEquals(0, getSubsequenceCount2("SXE", "SUBSEQUENCE"));
        Assertions.assertEquals(3, getSubsequenceCount2("HRW", "HERHRWS"));
        Assertions.assertEquals(536, getSubsequenceCount2("UVV", "VVVVUUUUVUVUVUVVVVUUVVUUUUVUVUVUVUUU"));
        Assertions.assertEquals(2, getSubsequenceCount2("LKL", "KKMKMKKKKKMMLMKKMMML"));
        Assertions.assertEquals(20436236, getSubsequenceCount2("RZW", "WKRDDWRRQWRWYBAQJYAWWDKDKDAQRJZZJAJZYBJYRQRRYQKABBJJAYWYBJRDZRZRWQDKZAKDQQDAJAJYQJAYQKDYRJDQYJRJDQRZQYYYAJDJZJRZBDJYJZBKQKADKZDQDJJRKAJZRKKJDQKJBAYDABRDAWDWWQAKJRAWWYJRWBYZQYBWKARBRYAQJWQJBWJKAYQAQKJJBZDBQAQAABAWDQWBQYJQAJWKKYKQZWADJZYKKWBAKBKKBKAZQQRYWRKAJBWWJAYDRDJWAKADDQYBQWWJQDZBJBZKWZAYJZJDKZZBRKARDJWWQKRWWWWQAAQKJYZYAYKYAAQZJJDARWJKBBWJARDWBQDARQBDAZDDYJDABKRKARJABDRBRWAQJZADDRRZKRJQYJDWAYAYYWRYKDJZYKRRAQDZAWBQZBZYAQQKJZRRJYAQZRJKQYQYRJKAYKRWJQQWRBBQQWYWBWWZKKYKZBWQQBYBDQQYKAKKKJWQAYRWQWDAJKZRDWRKAKAKWAQDQADYQDRYRWZRDJKWYJYZJWWKRJRKKAQQKAWRWRQJDZWQYBWDQQQWQYJWJARJWQYZQBYWKKAJZADQBBBKRZYYYKRJAQJYDKRZKWKRWZWKWQZDZBBDRAZRKKZZZWDYYDWYWZBAQBQARJBQQJYYQRKKDYDYAZZJAJQKRJKDYYRZBDAKRJAKZQDJBDJABZDBAJQKAJWKQZJYJKQQDJBKZKZBJKBKRJAZARDDBDAAKJBDABYZYDRDAZDWADQYWAWYBQYRAJAWZADDDDQBQJAAYAWDBYWYQBAKYJRKYKYADYYKADZKWAQKZJKADZJBKDRJQDRKBWDJBRQKQQQYAABJYYJBJBDYQQBYRZARBRDAKJDJWDRZWBQYAZRWDAJJKBZZZJKQJBZDYBDWDDWBDZZQJJZJZBYRQJQKADKQRDDDBRRJJBBWJWDRRKJDKZBDKRBZWDYJARZDQZRYKQBYYYZAZZYRYADDWWYKAKJZQJKBZKRAYYJRWYDKRWJRYQQQRZJBYKWQJWYWYYZWYBRRKQBKYRDJAQRZRBJQDRJBBWRYKRQJDWKRYKDKKRQQDAKKWZWWARZJRARZKQQQAYBKWAZWQKYDJYBKAQAWJAQQJYKJRRQYBZYWKZYARJWBBQQYWDQWZYKKRQWADYRZDWRDJJJJRZRYQAJBKQYKRQBRBRYDDYQAQAWAYQWDARRBAKAWQYJRWBZWJKWYADJBRAADZDJYAWJRDJDDAJBABBYDABKJARQBDZJJYRQKZDKBZAQZQJKQRKDDQDYWWWDAYYAAZWBAZJYRAQAQJJWWDRQZJWDDZYRJQDRJZDRRRAWDDRKYRBJRYQKDRADQAQAZDZDWYKZWBWJQBKJKJZRJJJDKKYAJJAJRADJYWQKJWADYWYBARKYZZJZZRYQDBDJADJWRQDQBRDJZJQWZJBDADAAJKBADRJRQKRKDYZQKYWBAAZYZZYWKBBQARWZDBDBDKBDZKKJARDYQKYAZWZQRBYKBRKKJYKKAZYKZZRJWWKWDZYYWRJYAKZZJAARBBWZRDWBBYRZRQBJWKDABRZDYYWRARARYAQRAQZBQAARRBBDJJJDABZDDKKQQJBDJJWQARRYWKAKQQZARDJWWWBZKQZBAZQKWDADZAJWBRQAWBABQBWYRWYADWADQQAQKDAAJKDJZDRQQDDRRAJBZYZJJYRJKDWAKQBQJRQDJZBZAWZRBZBYYKRRDQDKBKQZDQDAYYKBYWYAAWBQYZBKBABRZZWWYBRKQBAKKJWARZJJBWBRZZJDYQZZDYKWRAJDZYWQZDYJBJRJKDADDWBKDZBAYYAZBZYAYDZQJWKADJWDDQBZRQRRJAQYQRQKDJBAQDWWQKQWAQQAJYRQQKDKQAWZDBRAWBWABKYWYYADBWKKBYJYRYZRBDYBRZRJDAQZYYDWWRBAAJRWBQBJYKAKYZBZZJBJWWDRRAZJDKAQQRDQYZABBQDWKZYYZZBJYZAWYKAQWDJQDYJRDBJKQJZQWQZDQQWDQBZAQRWQJJYJRYZJJKBJDYDAAAZZDRQYBJQRBWADKDJYDZYBAKRQZJZBAYQADBZRRWZRYWJRWZZRJJWKYYDDJJAZZQZWWRQARRAKQDAAZDYKWKJKJRYKDAWYBZBKKWBDDAKRBBWBDKZKYDKYBDRBZKDRBBYQWWJKBKQZAQZQKADYDKAAWWBDQABDADZARJRAWZKYZAJDADZZYJDQQYARRQJWKRDZZJKDZBAZKZZADRDAQQBAAWKZKWDWRRBJKZDJRKZAZRJYDBZBQQWRQADDZDDAAAQWJRJZRJRYQQAQAADKJKYYABWDAJYBRKZQJJJYZYJKBKJRYZRJWAWQQDKBYRBWWYZQWDKQBZDYJZYWDKBDQJZAQQQQYBJYRAJRWZYBQRYKJYZAWDRBKDAWJQDDRAZQRKDYBQADKJKQDKBAZZBWJZJDYKKBKBKKRZBKDZQJARJRJZRZWYRYQDYRZYJWJARJQZAWADJBDDKQAZWKRYWYAZZKBDYKJYBBKJZZDZJDKJRYJQJDKWYDKRZAQWDJQKZZZJQDBBAYKDKRJRYZJBQZBBJYJWWZJRWQBWQZQBRBDAKABDKBDJWJDZZZWYJDQYYJKJWAYWQDDBBDWKRYBKDZAYJAKBQRJZKKDZBAWKKRRQJAZKQWDABQQBAJQWQWQBABRWDDQAQBWQDZARWWZQRJQDQKYDYYBJYABRJZYJDDBWWRJDRBRABRWBKAZJQRDARWBAAAYRJQJQJJRDJBBRKZAKWZBKWZYYJRAAWYDYDYZJAYBYQJZWQBKJQRWZQAYWRQBAZKKWBBZBQKBJRDYQDDKYWRZZKRDYKDJKWYRQZKBQDRWWDRZBYRRKYJZWWWDRWRAQQRDQRQJKQDZAAYQRBZKWJWDZKQKZBWBKQJRKZQWAQKWJABKKYYRKBJJWQJDBYWKARWKYQKAYQQKJRZDWQDAYWRRZJJDZBBZBQWWQYKKWBYJADDAKKQRJJYZWABWAJYJZADADRDZQWZDZRRKDBZJJRZZQZBBKAABKZYQYQZRDZRQRDDYBDWBYYKRKWQQQQZZJBBRJAJRJQJQWWQDZBDKBZDJRDZDRKKQWBDDQKJZBZAWYRQKZJYWWKJBZRYDQZAYKWRWQAAYAYQDZJJYYARQDAZDYRYWKRQZJWBYARARRYABDYAQRZRYWBBKAADWZQJBQDZARKWJQZAQYARBZKYJWZKRWRRJDDZQDQJQJQWZKKABQDZZKZRDRJDJQRKDBADYKDBBKJQADDABBDDADDYWYDZQWARAQJDWWWZZKZYQDZYQZRZRQQKYRYYYKAKKZJRDABBRBWDQKRJRKQDZBKZJABWBDQKZWQDYDBQDZJDRAZKZRQJABRQRYRZWRDZJQRDBBBJWQJRQZYJDAZYQRWRKKAQKKZQYYRQWABKAABDYBDYDDYJKYAJZKQBKYYJYRDAWDYAJYJRZJYAQYKZBZZBQYQBKWKJRYRBDBJDRYADAAYDBYZKDDYYJBJZBAZBBQKKYBRZWYKAQKYRZYYWWRBKKBRQZQRZBWYAZYZZDYDZAZRYKYYQJBYDDWDWYKKQZRRRKZQYJZJQKKRQRWQRABZBRKRBQQWJKJKRKZWJBABKQJKAWZWDQZQJARKAQABAAQBRQKJWWWYZAYQBKDZKQKAJYQAWAZJRJAQRABZKWDQZJZBKDBDAYKBJJQBDRZQAYYADWAARQAYYAYYRJBKRAZRQYZAQDKWRBYBYYJZDDDQZAQZDBDQYYRWBDRQZQDZRYJQWDKDKYKYWAJZKBZARAYYWWRAZJKWAQBAJYZQRRABKBKKAKRZRDZZQQRDQYBBKAKWYKYZDZZDDJZRBABWQYBADKZAQWZRRJWQJDYZRQAAZRZKRBDJQAJRKWQAYQARBZYYQDZBRDZZYKDBWAZKJDZWJJYAJABABRJRAYDBJJKKKKKZZDAQRJADYYQQKAWJQZKZKDQKRWARZWAJKQKJAQJBDRARWAYBJAWYRZRWQRDWAQYWRJZBJJAAJRJDBKBYJJDYJWBRRDBBWBJWKJZBRDJAYWRYKZKWBKAZQKKBDYDARKDWBYJJZDWABJWJQABBZQRDDJJZZAAWJKRWQKAYKJBWDBAKQRZDJDKWBWZJKKDJAZRBKBKZQDWJKJYQKKJRRKDRQRKBDAADJWJRWKDDYQZRAWBJKQYWDBZYYDZWZABBBJKABDDJZDKDZZRKYYBAKDZDJKDDJRWWDDJJDJYJWJWYABBABQQRDJZBRJWWBBDRDDKDAZYDYAZQKZYKBYWDDZDZZQRRBRJKAKYRKJRBBQQBARWJAAJAYJRRQDQQABWKJKJZWYYBQZKJKADBQYAYKRBRJZRBWRAYQDABBDZYDRQKBWJDBDYZDQRYQZRBQYRAWAAZKWZDDJYRWYQQAYBBJWYBJDQQBWRDRAQDBRKKWBBBDRKBKWKZQDQQAWQQRKBDQYJRJAZQAKBQQQBRRDKDWBZWZDZRZYBRJBBYRBZWARWQQAQDWWWAWJBWWJKQYBKZBQQRKWRYDYWDYBYDJABZKRYJBWYDJZJBQBBYKJQJYRBAZDDWAABKJKRQYJRWJZZZYJZQWRYQDJRKDWWQZYKRWWJBJDWJKDYRABZKWKQABAZZJYDYDYRZZDRQKJWJJKAYRKZARBKAQRKZWBDZAADZKAZKKZKQZZAJDZRJWRBAWRBKQQBJRBAYYJAKQZYQRYQJKWYJQDKAYWZYDKDKBKDJYAZWWQRKKQBBQDRARWDJDWBADRYWDWJBWYKYBKZQRYRYRKWQDRJKQWQZJDBDYYABJZBRKKBKJWZZAQZQRWBJBDBQJZZWDKKJRBJWRJJBWABAZKARZAQKQRYJWQZZDZAQYRWABYRBDZKZWRZYBDAZRZBARWWBDYBKKQBWRYYWWBAWRJYAADKDKDAAAZZBQRDKQBZYDWWJDWDRQKKZQDRZRZQBWJQQRZZKBZYJBJQQWBWZZYYQQRKYQBQZDKBAQWBZWWRABQJARJZKABJJDJKDBZQBDZZBRQDQRZDQBAYQQYJBBWAQKRAYAKQKBZYRAKDYAAQQYRYDKDBRAYRZKJKABJQAYKRWAKYJBKWRAAAQDDWW"));
    }

    static long getValue(long[][] table, int needP, int hayP) {
        if (needP >= 0 && needP < table.length && hayP >= 0 && hayP < table[0].length) {
            return table[needP][hayP];
        }

        if (needP < 0 ) {
            return 1; // a needle of size zero always matches irrespective of the haystack
        }

        return 0;
    }

    public static long getSubsequenceCount(String needle, String haystack) {
        if (needle.length() > haystack.length()) {
            return 0;
        }

        long[][] table = new long[needle.length()][haystack.length()];

        // traverse column first
        for (int hayP = 0; hayP < haystack.length(); hayP++) {
            for (int needP = 0; needP < needle.length(); needP++) {
                if (needle.charAt(needP) == haystack.charAt(hayP)) {
                    table[needP][hayP] = getValue(table, needP, hayP-1)
                        + getValue(table, needP-1, hayP - 1);
                } else {
                    table[needP][hayP] = getValue(table, needP, hayP-1);
                }
            }
        }
        return getValue(table, needle.length()-1, haystack.length()-1);
    }


    public static long getSubsequenceCount2(String needle, String haystack) {
        if (needle.length() > haystack.length()) {
            return 0;
        }

        long[][] table = new long[needle.length() + 1][haystack.length() + 1];


        for(int i = 0; i < table[0].length; i++) {
            table[0][i] = 1;
        }

        for(int i = 0; i < table.length; i++) {
            table[i][0] = 0;
        }

        table[0][0] = 1;

        needle = " " + needle;
        haystack = " " + haystack;

        for (int hayP = 1; hayP < haystack.length(); hayP++) {
            for (int needP = 1; needP < needle.length(); needP++) {
                if (needle.charAt(needP) == haystack.charAt(hayP)) {
                    table[needP][hayP] = table[needP][hayP - 1] + table[needP-1][hayP - 1];
                } else {
                    table[needP][hayP] = table[needP][hayP - 1];
                }
            }
//            System.out.println(haystack.charAt(hayP));
//            printArray(table);
        }
        return table[needle.length()-1][haystack.length()-1];

    }

    static void printArray(long[][] table) {
        for (int k = 0; k < table.length; k++) {
            var row = table[k];
            for (var i : row) {
                System.out.print(i + "\t");
            }
            System.out.println();
        }
        System.out.println();
        System.out.println();
    }

}
